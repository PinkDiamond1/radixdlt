/*
 * Radix System API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.system.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BFTMetrics
 */
@JsonPropertyOrder({
  BFTMetrics.JSON_PROPERTY_EVENTS_RECEIVED,
  BFTMetrics.JSON_PROPERTY_COMMITTED_VERTICES,
  BFTMetrics.JSON_PROPERTY_NO_VOTES_SENT,
  BFTMetrics.JSON_PROPERTY_VOTE_QUORUMS,
  BFTMetrics.JSON_PROPERTY_TIMEOUT_QUORUMS,
  BFTMetrics.JSON_PROPERTY_PACEMAKER,
  BFTMetrics.JSON_PROPERTY_SYNC,
  BFTMetrics.JSON_PROPERTY_VERTEX_STORE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-20T22:11:26.095756951+01:00[Europe/Warsaw]")
public class BFTMetrics {
  public static final String JSON_PROPERTY_EVENTS_RECEIVED = "events_received";
  private Long eventsReceived;

  public static final String JSON_PROPERTY_COMMITTED_VERTICES = "committed_vertices";
  private Long committedVertices;

  public static final String JSON_PROPERTY_NO_VOTES_SENT = "no_votes_sent";
  private Long noVotesSent;

  public static final String JSON_PROPERTY_VOTE_QUORUMS = "vote_quorums";
  private Long voteQuorums;

  public static final String JSON_PROPERTY_TIMEOUT_QUORUMS = "timeout_quorums";
  private Long timeoutQuorums;

  public static final String JSON_PROPERTY_PACEMAKER = "pacemaker";
  private BFTPacemakerMetrics pacemaker;

  public static final String JSON_PROPERTY_SYNC = "sync";
  private BFTSyncMetrics sync;

  public static final String JSON_PROPERTY_VERTEX_STORE = "vertex_store";
  private BFTVertexStoreMetrics vertexStore;

  public BFTMetrics eventsReceived(Long eventsReceived) {
    this.eventsReceived = eventsReceived;
    return this;
  }

   /**
   * Get eventsReceived
   * @return eventsReceived
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_EVENTS_RECEIVED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getEventsReceived() {
    return eventsReceived;
  }


  @JsonProperty(JSON_PROPERTY_EVENTS_RECEIVED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventsReceived(Long eventsReceived) {
    this.eventsReceived = eventsReceived;
  }


  public BFTMetrics committedVertices(Long committedVertices) {
    this.committedVertices = committedVertices;
    return this;
  }

   /**
   * Get committedVertices
   * @return committedVertices
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_COMMITTED_VERTICES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getCommittedVertices() {
    return committedVertices;
  }


  @JsonProperty(JSON_PROPERTY_COMMITTED_VERTICES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCommittedVertices(Long committedVertices) {
    this.committedVertices = committedVertices;
  }


  public BFTMetrics noVotesSent(Long noVotesSent) {
    this.noVotesSent = noVotesSent;
    return this;
  }

   /**
   * Get noVotesSent
   * @return noVotesSent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_NO_VOTES_SENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getNoVotesSent() {
    return noVotesSent;
  }


  @JsonProperty(JSON_PROPERTY_NO_VOTES_SENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNoVotesSent(Long noVotesSent) {
    this.noVotesSent = noVotesSent;
  }


  public BFTMetrics voteQuorums(Long voteQuorums) {
    this.voteQuorums = voteQuorums;
    return this;
  }

   /**
   * Get voteQuorums
   * @return voteQuorums
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_VOTE_QUORUMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getVoteQuorums() {
    return voteQuorums;
  }


  @JsonProperty(JSON_PROPERTY_VOTE_QUORUMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVoteQuorums(Long voteQuorums) {
    this.voteQuorums = voteQuorums;
  }


  public BFTMetrics timeoutQuorums(Long timeoutQuorums) {
    this.timeoutQuorums = timeoutQuorums;
    return this;
  }

   /**
   * Get timeoutQuorums
   * @return timeoutQuorums
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TIMEOUT_QUORUMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getTimeoutQuorums() {
    return timeoutQuorums;
  }


  @JsonProperty(JSON_PROPERTY_TIMEOUT_QUORUMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimeoutQuorums(Long timeoutQuorums) {
    this.timeoutQuorums = timeoutQuorums;
  }


  public BFTMetrics pacemaker(BFTPacemakerMetrics pacemaker) {
    this.pacemaker = pacemaker;
    return this;
  }

   /**
   * Get pacemaker
   * @return pacemaker
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PACEMAKER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BFTPacemakerMetrics getPacemaker() {
    return pacemaker;
  }


  @JsonProperty(JSON_PROPERTY_PACEMAKER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPacemaker(BFTPacemakerMetrics pacemaker) {
    this.pacemaker = pacemaker;
  }


  public BFTMetrics sync(BFTSyncMetrics sync) {
    this.sync = sync;
    return this;
  }

   /**
   * Get sync
   * @return sync
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SYNC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BFTSyncMetrics getSync() {
    return sync;
  }


  @JsonProperty(JSON_PROPERTY_SYNC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSync(BFTSyncMetrics sync) {
    this.sync = sync;
  }


  public BFTMetrics vertexStore(BFTVertexStoreMetrics vertexStore) {
    this.vertexStore = vertexStore;
    return this;
  }

   /**
   * Get vertexStore
   * @return vertexStore
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_VERTEX_STORE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BFTVertexStoreMetrics getVertexStore() {
    return vertexStore;
  }


  @JsonProperty(JSON_PROPERTY_VERTEX_STORE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVertexStore(BFTVertexStoreMetrics vertexStore) {
    this.vertexStore = vertexStore;
  }


  /**
   * Return true if this BFTMetrics object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BFTMetrics bfTMetrics = (BFTMetrics) o;
    return Objects.equals(this.eventsReceived, bfTMetrics.eventsReceived) &&
        Objects.equals(this.committedVertices, bfTMetrics.committedVertices) &&
        Objects.equals(this.noVotesSent, bfTMetrics.noVotesSent) &&
        Objects.equals(this.voteQuorums, bfTMetrics.voteQuorums) &&
        Objects.equals(this.timeoutQuorums, bfTMetrics.timeoutQuorums) &&
        Objects.equals(this.pacemaker, bfTMetrics.pacemaker) &&
        Objects.equals(this.sync, bfTMetrics.sync) &&
        Objects.equals(this.vertexStore, bfTMetrics.vertexStore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventsReceived, committedVertices, noVotesSent, voteQuorums, timeoutQuorums, pacemaker, sync, vertexStore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BFTMetrics {\n");
    sb.append("    eventsReceived: ").append(toIndentedString(eventsReceived)).append("\n");
    sb.append("    committedVertices: ").append(toIndentedString(committedVertices)).append("\n");
    sb.append("    noVotesSent: ").append(toIndentedString(noVotesSent)).append("\n");
    sb.append("    voteQuorums: ").append(toIndentedString(voteQuorums)).append("\n");
    sb.append("    timeoutQuorums: ").append(toIndentedString(timeoutQuorums)).append("\n");
    sb.append("    pacemaker: ").append(toIndentedString(pacemaker)).append("\n");
    sb.append("    sync: ").append(toIndentedString(sync)).append("\n");
    sb.append("    vertexStore: ").append(toIndentedString(vertexStore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

